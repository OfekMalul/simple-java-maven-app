# Name: Ofek Malul
# Date: 6/1/2023

name: Java CI with Maven

on:
  push:
    branches: ["master"]

env:
  DOCKER_REPO_NAME_PUB: "ofekmalul/java-hello-world-production"
  DOCKER_REPO_NAME_COMPANY: "ofekmalul/java_hello_world"

jobs:
  CI_Java_Project:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven

      - name: Build and Test with Maven
        run: mvn package

      - name: Getting version of pom jar file
        run: echo "VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout | grep '^[^[]')" >> "$GITHUB_ENV"

      - name: Increase Patch version of pom jar file
        run: |
          MAJOR=$(echo $VERSION|cut -d. -f1)
          MINOR=$(echo $VERSION|cut -d. -f2)
          PATCH=$(echo $VERSION|cut -d. -f3)

          PATCH=$((PATCH+1))
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

          # Use Maven to set the new version using versions-maven-plugin
          mvn versions:set -DnewVersion=$NEW_VERSION

      - name: Public Docker image
        run: |
          docker build . --build-arg APP_VERSION=$NEW_VERSION --tag ${DOCKER_REPO_NAME_PUB}:$NEW_VERSION
          docker build . --build-arg APP_VERSION=$NEW_VERSION --tag ${DOCKER_REPO_NAME_PUB}:latest

      - name: versioning by date + commit hash
        run: |
          IMAGE_VERSION=$(date +%Y-%m-%d)-$(echo $GITHUB_SHA | cut -c1-6)
          echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV

      - name: Company docker image
        run: |
          docker build . --build-arg APP_VERSION=$NEW_VERSION --tag ${DOCKER_REPO_NAME_COMPANY}:$IMAGE_VERSION

      - name: docker login
        env:
          DOCKER_USER: ${{secrets.DOCKER_USER}}
          DOCKER_PASSWD: ${{secrets.DOCKER_PASSWORD}}
        run: docker login -u $DOCKER_USER -p $DOCKER_PASSWD

      - name: push to DockerHub
        run: |
          docker push ${{secrets.DOCKER_USER}}/java_hello_world:${IMAGE_VERSION}
          docker push ${{secrets.DOCKER_USER}}/java-hello-world-production:${NEW_VERSION}
          docker push ${{secrets.DOCKER_USER}}/java-hello-world-production:latest

      - name: update pom file in github repository
        env:
          USER_NAME: ${{secrets.USERNAME_GITHUB}}
          USER_EMAIL: ${{secrets.USERNAME_GITHUB}}
        run: |
          git config --global user.name ${USER_NAME}
          git config --global user.email ${USER_EMAIL}
          git commit -am "update pom"
          git push

  CD_Java_Project:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Deploy to EC2
        env:
          USER_NAME: ${{ secrets.USER_NAME }}
          HOST_IP: ${{ secrets.IP_ADDRESS_JAVA_INSTANCE }}
          PRIVATE_KEY: ${{ secrets.SSH_KEY_INSTANACE }}

        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOST_IP} '

            sudo docker images
            sudo docker ps -a
            sudo docker run ofekmalul/java_hello_world:2024-01-07-7d19cf
            '

  # CD_Java_Project:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: hashicorp/setup-terraform@v3

  #     - name: initilize
  #       run: cd terraform && terraform init

  #     - name: plan
  #       run: cd terraform && terraform plan -no-color

  #     - name: apply
  #       run: cd terraform && terraform apply -auto-approve

  # update_semantic_version:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - users: actions/checkout@v3
  #     - name: Bump version and push tag
  #       uses: remorses/bump-version@js
  #       with:
  #         version_file: ./version.txt
  #       name: build docker image with semantic versioning
  #       run : docker build . -t java-hello-world:$
